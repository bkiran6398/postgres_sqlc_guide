// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package postgres

import (
	"context"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users (
  name,
  password
) VALUES (
  $1,
  $2
) RETURNING id, name, password, created_at, updated_at
`

type UserCreateParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, userCreate, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userDelete = `-- name: UserDelete :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) UserDelete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, userDelete, id)
	return err
}

const userGet = `-- name: UserGet :one

SELECT id, name, password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

// CREATE TABLE IF NOT EXISTS users (
//   id SERIAL,
//   name VARCHAR(255) NOT NULL UNIQUE,
//   password VARCHAR(255) NOT NULL,
//   created_at TIMESTAMP NOT NULL DEFAULT NOW(),
//   updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
//   PRIMARY KEY (id)
// );
func (q *Queries) UserGet(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, userGet, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userList = `-- name: UserList :many
SELECT id, name, password, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) UserList(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, userList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userUpdate = `-- name: UserUpdate :exec
UPDATE users
set
  name = $1,
  password = $2
WHERE id = $3
`

type UserUpdateParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) error {
	_, err := q.db.ExecContext(ctx, userUpdate, arg.Name, arg.Password, arg.ID)
	return err
}
