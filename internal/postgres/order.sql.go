// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: order.sql

package postgres

import (
	"context"
)

const getOrderCountByItem = `-- name: GetOrderCountByItem :one
SELECT COUNT(*) FROM orders
WHERE item_id = $1
`

func (q *Queries) GetOrderCountByItem(ctx context.Context, itemID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrderCountByItem, itemID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOrderCountByUser = `-- name: GetOrderCountByUser :one
SELECT COUNT(*) FROM orders
WHERE user_id = $1
`

func (q *Queries) GetOrderCountByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrderCountByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOrderCountByUserAndItem = `-- name: GetOrderCountByUserAndItem :one
SELECT COUNT(*) FROM orders
WHERE user_id = $1 AND item_id = $2
`

type GetOrderCountByUserAndItemParams struct {
	UserID int32 `json:"user_id"`
	ItemID int32 `json:"item_id"`
}

func (q *Queries) GetOrderCountByUserAndItem(ctx context.Context, arg GetOrderCountByUserAndItemParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrderCountByUserAndItem, arg.UserID, arg.ItemID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const orderCreate = `-- name: OrderCreate :one
INSERT INTO orders (
  user_id,
  item_id
) VALUES (
  $1,
  $2
) RETURNING id, user_id, item_id, created_at, updated_at
`

type OrderCreateParams struct {
	UserID int32 `json:"user_id"`
	ItemID int32 `json:"item_id"`
}

func (q *Queries) OrderCreate(ctx context.Context, arg OrderCreateParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, orderCreate, arg.UserID, arg.ItemID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const orderDelete = `-- name: OrderDelete :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) OrderDelete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, orderDelete, id)
	return err
}

const orderGet = `-- name: OrderGet :one

SELECT id, user_id, item_id, created_at, updated_at FROM orders
WHERE id = $1 LIMIT 1
`

// CREATE TABLE IF NOT EXISTS orders (
//   id SERIAL,
//   user_id INT NOT NULL,
//   item_id INT NOT NULL,
//   created_at TIMESTAMP NOT NULL DEFAULT NOW(),
//   updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
//   PRIMARY KEY (id),
//   FOREIGN KEY (user_id) REFERENCES users (id),
//   FOREIGN KEY (item_id) REFERENCES items (id)
// );
func (q *Queries) OrderGet(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, orderGet, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const orderGetByItem = `-- name: OrderGetByItem :many
SELECT id, user_id, item_id, created_at, updated_at FROM orders
WHERE item_id = $1
`

func (q *Queries) OrderGetByItem(ctx context.Context, itemID int32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, orderGetByItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderGetByUser = `-- name: OrderGetByUser :many
SELECT id, user_id, item_id, created_at, updated_at FROM orders
WHERE user_id = $1
`

func (q *Queries) OrderGetByUser(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, orderGetByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderGetByUserAndItem = `-- name: OrderGetByUserAndItem :one
SELECT id, user_id, item_id, created_at, updated_at FROM orders
WHERE user_id = $1 AND item_id = $2
`

type OrderGetByUserAndItemParams struct {
	UserID int32 `json:"user_id"`
	ItemID int32 `json:"item_id"`
}

func (q *Queries) OrderGetByUserAndItem(ctx context.Context, arg OrderGetByUserAndItemParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, orderGetByUserAndItem, arg.UserID, arg.ItemID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const orderList = `-- name: OrderList :many
SELECT id, user_id, item_id, created_at, updated_at FROM orders
ORDER BY created_at DESC
`

func (q *Queries) OrderList(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, orderList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orderUpdate = `-- name: OrderUpdate :exec
UPDATE orders
set
  user_id = $1,
  item_id = $2
WHERE id = $3
`

type OrderUpdateParams struct {
	UserID int32 `json:"user_id"`
	ItemID int32 `json:"item_id"`
	ID     int32 `json:"id"`
}

func (q *Queries) OrderUpdate(ctx context.Context, arg OrderUpdateParams) error {
	_, err := q.db.ExecContext(ctx, orderUpdate, arg.UserID, arg.ItemID, arg.ID)
	return err
}
