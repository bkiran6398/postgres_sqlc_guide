// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: author.sql

package postgres

import (
	"context"
	"database/sql"
)

const authorCreate = `-- name: AuthorCreate :one
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
`

type AuthorCreateParams struct {
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
}

func (q *Queries) AuthorCreate(ctx context.Context, arg AuthorCreateParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, authorCreate, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const authorDelete = `-- name: AuthorDelete :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) AuthorDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, authorDelete, id)
	return err
}

const authorGet = `-- name: AuthorGet :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) AuthorGet(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, authorGet, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const authorList = `-- name: AuthorList :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) AuthorList(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, authorList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authorUpdate = `-- name: AuthorUpdate :exec
UPDATE authors
set name = $2,
bio = $3
WHERE id = $1
`

type AuthorUpdateParams struct {
	ID   int64          `json:"id"`
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
}

func (q *Queries) AuthorUpdate(ctx context.Context, arg AuthorUpdateParams) error {
	_, err := q.db.ExecContext(ctx, authorUpdate, arg.ID, arg.Name, arg.Bio)
	return err
}
